sum_d/length(merged_df$SCHID) - sum_noschool/length(merged_df$SCHID),
sum_ind/length(merged_df$SCHID) - sum_noschool/length(merged_df$SCHID),
sum_sch/length(merged_df$SCHID) - sum_noschool/length(merged_df$SCHID)
),
S.E. = c(1/dim(merged_df)[1] * sqrt(var_di),
1/dim(merged_df)[1] * sqrt(var_d),
1/dim(merged_df)[1] * sqrt(var_ind),
1/dim(merged_df)[1] * sqrt(var_sch)))
HT
# Simulation about Misspecification
# 1. Assume y_school = 0.175, y_indirect = 0.124, y_direct+indirect = 0.265, y_direct = 0.270
# 2. Define Indirect to be only of the best friend's impact
# 3. Define Direct to be only of
#
merged_df<-read.csv("merged_df.csv")
load(file="ipi_di.RData")
load(file="ipi_d.RData")
load(file="ipi_ind.RData")
load(file="ipi_sch.RData")
di_df = merged_df %>% filter(exposure == "Direct+Indirect")
d_df = merged_df %>% filter(exposure == "Direct")
ind_df = merged_df %>% filter(exposure == "Indirect")
sch_df = merged_df %>% filter(exposure == "School")
sim_df = merged_df
simulate_estimate <- function(merged_df) {
sum_di = 0
sum_d = 0
sum_ind = 0
sum_sch = 0
for (i in 1:nrow(merged_df)) {
r <- merged_df[i,]
if (r$i.treat == 1 & r$indirect == 1 & r$WRISTOW2 == 1) {
sum_di = sum_di + 1/r$pdi
} else if (r$i.treat == 1 & r$indirect == 0 & r$WRISTOW2 == 1) {
sum_d = sum_d + 1/r$pd
} else if (r$i.treat == 0 & r$indirect == 1 & r$WRISTOW2 ==1) {
sum_ind = sum_ind + 1/r$pind
} else if (r$i.treat == 0 & r$indirect ==0 & r$SCHTREAT == 1 & r$WRISTOW2 == 1) {
sum_sch = sum_sch + 1/r$psch
} else if (r$SCHTREAT == 0 & r$WRISTOW2 == 1) {
sum_noschool = sum_noschool + 1/r$noschool
}
}
ms = merged_df %>% filter(exposure != "No School") %>% group_by(exposure) %>% summarize(m = mean(WRISTOW2))
ms =  c(ms$m[ms$exposure=="Direct+Indirect"],
ms$m[ms$exposure=="Direct"],
ms$m[ms$exposure=="Indirect"],
ms$m[ms$exposure=="School"])
HT <- data.frame(Estimand = c("Direct+Indirect", "Direct", "Indirect", "School"),
Estimate = c(sum_di/length(merged_df$SCHID),
sum_d/length(merged_df$SCHID),
sum_ind/length(merged_df$SCHID),
sum_sch/length(merged_df$SCHID)),
Avg_estimate = ms)
return(HT)
}
#Y_di = 0.265
#Y_d = 0.27
#Y_ind = 0.124
#Y_sch = 0.175
Y_di = 0.299
Y_d = 0.305
Y_ind = 0.154
Y_sch = 0.057
plan(multisession, workers = 16)
registerDoFuture()
R = 160
simulate <- foreach(i = 1:R) %dorng% {
students <- generate_treat(da99999.0002)
df <- join(students)
df$index = 1:length(df$SCHID)
direct_indirect = rep(0, length(df$SCHID))
direct = rep(0, length(df$SCHID))
indirect = rep(0, length(df$SCHID))
school = rep(0, length(df$SCHID))
exposure = rep(0, length(df$SCHID))
q = df %>% filter(indirect == TRUE & i.treat == 1) %>% select(index)
q2 = df %>% filter(indirect == FALSE & i.treat == 1) %>% select(index)
q3 = df %>% filter(indirect == TRUE & i.treat == 0) %>% select(index)
q4 = df %>% filter(SCHTREAT == 1 & indirect == FALSE & i.treat == 0)
exposure = rep(0, length(df$SCHID))
exposure[q$index] = "Direct+Indirect"
exposure[q2$index] = "Direct"
exposure[q3$index] = "Indirect"
exposure[q4$index] = "School"
df$exposure = exposure
di_df = df %>% filter(exposure == "Direct+Indirect")
d_df = df %>% filter(exposure == "Direct")
ind_df = df %>% filter(exposure == "Indirect")
sch_df = df %>% filter(exposure == "School")
sim_df = df
sim_df$pd = merged_df$pd
sim_df$psch = merged_df$psch
sim_df$pdi = merged_df$pdi
sim_df$pind = merged_df$pind
sim_df$noschool = rep(1/2, length(sim_df$SCHID))
sim_df$WRISTOW2 = rep(0, dim(sim_df)[1])
sim_df$WRISTOW2[di_df$index] = rbernoulli(dim(di_df)[1], Y_di)
sim_df$WRISTOW2[d_df$index] = rbernoulli(dim(d_df)[1], Y_d)
sim_df$WRISTOW2[ind_df$index] = rbernoulli(dim(ind_df)[1], Y_ind)
sim_df$WRISTOW2[sch_df$index] = rbernoulli(dim(sch_df)[1], Y_sch)
sim_df$index = 1:length(sim_df$SCHID)
output <- simulate_estimate(sim_df)
output
}
sim_true <- data.frame(Estimand =c("Direct+Indirect", "Direct", "Indirect", "School"),
Mean_HT = c(mean(sapply(simulate, function(x){x$Estimate[1]})),
mean(sapply(simulate, function(x){x$Estimate[2]})),
mean(sapply(simulate, function(x){x$Estimate[3]})),
mean(sapply(simulate, function(x){x$Estimate[4]}))),
Sd_HT = c(sd(sapply(simulate, function(x){x$Estimate[1]})),
sd(sapply(simulate, function(x){x$Estimate[2]})),
sd(sapply(simulate, function(x){x$Estimate[3]})),
sd(sapply(simulate, function(x){x$Estimate[4]}))),
Mean_avg = c(mean(sapply(simulate, function(x){x$Avg_estimate[1]})),
mean(sapply(simulate, function(x){x$Avg_estimate[2]})),
mean(sapply(simulate, function(x){x$Avg_estimate[3]})),
mean(sapply(simulate, function(x){x$Avg_estimate[4]}))),
Sd_avg = c(sd(sapply(simulate, function(x){x$Avg_estimate[1]})),
sd(sapply(simulate, function(x){x$Avg_estimate[2]})),
sd(sapply(simulate, function(x){x$Avg_estimate[3]})),
sd(sapply(simulate, function(x){x$Avg_estimate[4]}))),
RMSE_HT = c(sqrt(mean(sapply(simulate, function(x){(x$Estimate[1] - Y_di)**2}))),
sqrt(mean(sapply(simulate, function(x){(x$Estimate[2] - Y_d)**2}))),
sqrt(mean(sapply(simulate, function(x){(x$Estimate[3] - Y_ind)**2}))),
sqrt(mean(sapply(simulate, function(x){(x$Estimate[4] - Y_sch)**2})))),
RMSE_avg = c(sqrt(mean(sapply(simulate, function(x){(x$Avg_estimate[1] - Y_di)**2}))),
sqrt(mean(sapply(simulate, function(x){(x$Avg_estimate[2] - Y_d)**2}))),
sqrt(mean(sapply(simulate, function(x){(x$Avg_estimate[3] - Y_ind)**2}))),
sqrt(mean(sapply(simulate, function(x){(x$Avg_estimate[4] - Y_sch)**2})))))
# False exposure mapping: same mapping numbers but only ST1 counts
mis_join <- function(da99999.0001) {
for (i in 1:1) {
if (i == 1) {
merged_df <- da99999.0001 %>% drop_na(ID, TREAT, SCHID, SCHTREAT) %>% select(ID, ST1, TREAT, SCHID, SCHTREAT, WRISTOW2, STRB)
right = merged_df %>% select(ID, TREAT, SCHID)
merged_df = merge(x = merged_df, y = right, by.x = c(paste0("ST", i), "SCHID"), by.y = c("ID", "SCHID"), all.x = TRUE)
colnames(merged_df)[colnames(merged_df) == "TREAT.x"] = "i.treat"
colnames(merged_df)[colnames(merged_df) == "TREAT.y"] = "st1.treat"
}
else {
mg.before <- da99999.0001 %>% drop_na(ID, TREAT, SCHID, SCHTREAT, WRISTOW2) %>% select(ID, paste0('ST', i), TREAT, SCHID, SCHTREAT, WRISTOW2, STRB)
right = mg.before %>% select(ID, TREAT, SCHID)
merged_df = merge(x = merged_df, y = right, by.x = c(paste0("ST", i), "SCHID"), by.y = c("ID", "SCHID"), all.x = TRUE)
colnames(merged_df)[colnames(merged_df) == "TREAT"] = paste0("st",i,"treat")
}
}
merged_df[is.na(merged_df)] = 0
merged_df <- merged_df %>% mutate(indirect = st1.treat >0)
for (i in 1:dim(merged_df)[1]) {
row = merged_df[i,]
if (row$indirect != 1 & row$SCHTREAT == 1) {
temp <- merged_df %>% filter(SCHID == row$SCHID, i.treat == 1) %>% select(ST1, i.treat)
for (j in 1:dim(temp)[1]) {
temp_row = temp[j,]
if (temp_row$i.treat == 1 & temp_row$ST1 == row$ID) {
merged_df[i,which(colnames(merged_df) == "indirect")] = TRUE
break
}
}
}
}
return(merged_df)
}
plan(multisession, workers = 16)
registerDoFuture()
R = 160
simulate2 <- foreach(i = 1:R) %dorng% {
students <- generate_treat(da99999.0002)
df <- mis_join(students)
df$index = 1:length(df$SCHID)
direct_indirect = rep(0, length(df$SCHID))
direct = rep(0, length(df$SCHID))
indirect = rep(0, length(df$SCHID))
school = rep(0, length(df$SCHID))
exposure = rep(0, length(df$SCHID))
q = df %>% filter(indirect == TRUE & i.treat == 1) %>% select(index)
q2 = df %>% filter(indirect == FALSE & i.treat == 1) %>% select(index)
q3 = df %>% filter(indirect == TRUE & i.treat == 0) %>% select(index)
q4 = df %>% filter(SCHTREAT == 1 & indirect == FALSE & i.treat == 0)
exposure[q$index] = "Direct+Indirect"
exposure[q2$index] = "Direct"
exposure[q3$index] = "Indirect"
exposure[q4$index] = "School"
df$exposure = exposure
di_df = df %>% filter(exposure == "Direct+Indirect")
d_df = df %>% filter(exposure == "Direct")
ind_df = df %>% filter(exposure == "Indirect")
sch_df = df %>% filter(exposure == "School")
sim_df = join(students)
sim_df$index = 1:length(sim_df$SCHID)
q = sim_df %>% filter(indirect == TRUE & i.treat == 1) %>% select(index)
q2 = sim_df %>% filter(indirect == FALSE & i.treat == 1) %>% select(index)
q3 = sim_df %>% filter(indirect == TRUE & i.treat == 0) %>% select(index)
q4 = sim_df %>% filter(SCHTREAT == 1 & indirect == FALSE & i.treat == 0)
exposure = rep(0, length(df$SCHID))
exposure[q$index] = "Direct+Indirect"
exposure[q2$index] = "Direct"
exposure[q3$index] = "Indirect"
exposure[q4$index] = "School"
sim_df$exposure = exposure
sim_df$pd = merged_df$pd
sim_df$psch = merged_df$psch
sim_df$pdi = merged_df$pdi
sim_df$pind = merged_df$pind
sim_df$noschool = rep(1/2, length(sim_df$SCHID))
sim_df$WRISTOW2 = rep(0, dim(sim_df)[1])
sim_df$WRISTOW2[di_df$index] = rbernoulli(dim(di_df)[1], Y_di)
sim_df$WRISTOW2[d_df$index] = rbernoulli(dim(d_df)[1], Y_d)
sim_df$WRISTOW2[ind_df$index] = rbernoulli(dim(ind_df)[1], Y_ind)
sim_df$WRISTOW2[sch_df$index] = rbernoulli(dim(sch_df)[1], Y_sch)
output <- simulate_estimate(sim_df)
output
}
sim_mis_1 <- data.frame(Estimand =c("Direct+Indirect", "Direct", "Indirect", "School"),
Mean_HT = c(mean(sapply(simulate2, function(x){x$Estimate[1]})),
mean(sapply(simulate2, function(x){x$Estimate[2]})),
mean(sapply(simulate2, function(x){x$Estimate[3]})),
mean(sapply(simulate2, function(x){x$Estimate[4]}))),
Sd_HT = c(sd(sapply(simulate2, function(x){x$Estimate[1]})),
sd(sapply(simulate2, function(x){x$Estimate[2]})),
sd(sapply(simulate2, function(x){x$Estimate[3]})),
sd(sapply(simulate2, function(x){x$Estimate[4]}))),
Mean_avg = c(mean(sapply(simulate2, function(x){x$Avg_estimate[1]})),
mean(sapply(simulate2, function(x){x$Avg_estimate[2]})),
mean(sapply(simulate2, function(x){x$Avg_estimate[3]})),
mean(sapply(simulate2, function(x){x$Avg_estimate[4]}))),
Sd_avg = c(sd(sapply(simulate2, function(x){x$Avg_estimate[1]})),
sd(sapply(simulate2, function(x){x$Avg_estimate[2]})),
sd(sapply(simulate2, function(x){x$Avg_estimate[3]})),
sd(sapply(simulate2, function(x){x$Avg_estimate[4]}))),
RMSE_HT = c(sqrt(mean(sapply(simulate2, function(x){(x$Estimate[1] - Y_di)**2}))),
sqrt(mean(sapply(simulate2, function(x){(x$Estimate[2] - Y_d)**2}))),
sqrt(mean(sapply(simulate2, function(x){(x$Estimate[3] - Y_ind)**2}))),
sqrt(mean(sapply(simulate2, function(x){(x$Estimate[4] - Y_sch)**2})))),
RMSE_avg = c(sqrt(mean(sapply(simulate2, function(x){(x$Avg_estimate[1] - Y_di)**2}))),
sqrt(mean(sapply(simulate2, function(x){(x$Avg_estimate[2] - Y_d)**2}))),
sqrt(mean(sapply(simulate2, function(x){(x$Avg_estimate[3] - Y_ind)**2}))),
sqrt(mean(sapply(simulate2, function(x){(x$Avg_estimate[4] - Y_sch)**2})))))
# False exposure mapping: less mapping numbers
plan(multisession, workers = 16)
registerDoFuture()
R = 160
simulate3 <- foreach(i = 1:R) %dorng% {
students <- generate_treat(da99999.0002)
df <- mis_join(students)
df$index = 1:length(df$SCHID)
direct_indirect = rep(0, length(df$SCHID))
direct = rep(0, length(df$SCHID))
indirect = rep(0, length(df$SCHID))
school = rep(0, length(df$SCHID))
exposure = rep(0, length(df$SCHID))
q = df %>% filter(i.treat == 1) %>% select(index)
q3 = df %>% filter(indirect == TRUE & SCHTREAT == 1) %>% select(index)
exposure[q$index] = "Direct"
exposure[q3$index] = "School"
df$exposure = exposure
d_df = df %>% filter(exposure == "Direct")
sch_df = df %>% filter(exposure == "School")
sim_df = join(students)
sim_df$index = 1:length(sim_df$SCHID)
q = sim_df %>% filter(indirect == TRUE & i.treat == 1) %>% select(index)
q2 = sim_df %>% filter(indirect == FALSE & i.treat == 1) %>% select(index)
q3 = sim_df %>% filter(indirect == TRUE & i.treat == 0) %>% select(index)
q4 = sim_df %>% filter(SCHTREAT == 1 & indirect == FALSE & i.treat == 0)
exposure = rep(0, length(df$SCHID))
exposure[q$index] = "Direct+Indirect"
exposure[q2$index] = "Direct"
exposure[q3$index] = "Indirect"
exposure[q4$index] = "School"
sim_df$exposure = exposure
sim_df$pd = merged_df$pd
sim_df$psch = merged_df$psch
sim_df$pdi = merged_df$pdi
sim_df$pind = merged_df$pind
sim_df$noschool = rep(1/2, length(sim_df$SCHID))
sim_df$WRISTOW2 = rep(0, dim(sim_df)[1])
sim_df$WRISTOW2[d_df$index] = rbernoulli(dim(d_df)[1], Y_d)
sim_df$WRISTOW2[sch_df$index] = rbernoulli(dim(sch_df)[1], Y_sch)
output <- simulate_estimate(sim_df)
output
}
sim_mis_2 <- data.frame(Estimand =c("Direct+Indirect", "Direct", "Indirect", "School"),
Mean_HT = c(mean(sapply(simulate3, function(x){x$Estimate[1]})),
mean(sapply(simulate3, function(x){x$Estimate[2]})),
mean(sapply(simulate3, function(x){x$Estimate[3]})),
mean(sapply(simulate3, function(x){x$Estimate[4]}))),
Sd_HT = c(sd(sapply(simulate3, function(x){x$Estimate[1]})),
sd(sapply(simulate3, function(x){x$Estimate[2]})),
sd(sapply(simulate3, function(x){x$Estimate[3]})),
sd(sapply(simulate3, function(x){x$Estimate[4]}))),
Mean_avg = c(mean(sapply(simulate3, function(x){x$Avg_estimate[1]})),
mean(sapply(simulate3, function(x){x$Avg_estimate[2]})),
mean(sapply(simulate3, function(x){x$Avg_estimate[3]})),
mean(sapply(simulate3, function(x){x$Avg_estimate[4]}))),
Sd_avg = c(sd(sapply(simulate3, function(x){x$Avg_estimate[1]})),
sd(sapply(simulate3, function(x){x$Avg_estimate[2]})),
sd(sapply(simulate3, function(x){x$Avg_estimate[3]})),
sd(sapply(simulate3, function(x){x$Avg_estimate[4]}))),
RMSE_HT = c(sqrt(mean(sapply(simulate3, function(x){(x$Estimate[1] - Y_d)**2}))),
sqrt(mean(sapply(simulate3, function(x){(x$Estimate[2] - Y_d)**2}))),
sqrt(mean(sapply(simulate3, function(x){(x$Estimate[3] - Y_sch)**2}))),
sqrt(mean(sapply(simulate3, function(x){(x$Estimate[4] - Y_sch)**2})))),
RMSE_avg = c(sqrt(mean(sapply(simulate3, function(x){(x$Avg_estimate[1] - Y_d)**2}))),
sqrt(mean(sapply(simulate3, function(x){(x$Avg_estimate[2] - Y_d)**2}))),
sqrt(mean(sapply(simulate3, function(x){(x$Avg_estimate[3] - Y_sch)**2}))),
sqrt(mean(sapply(simulate3, function(x){(x$Avg_estimate[4] - Y_sch)**2})))))
# False exposure mapping: more mapping numbers
mis_join2 <- function(da99999.0001) {
for (i in 1:10) {
if (i == 1) {
merged_df <- da99999.0001 %>% drop_na(ID, TREAT, SCHID, SCHTREAT) %>% select(ID, ST1, ST2, ST3, ST4, ST5, ST6, ST7, ST8, ST9, ST10, TREAT, SCHID, SCHTREAT, WRISTOW2, STRB)
right = merged_df %>% select(ID, TREAT, SCHID)
merged_df = merge(x = merged_df, y = right, by.x = c(paste0("ST", i), "SCHID"), by.y = c("ID", "SCHID"), all.x = TRUE)
colnames(merged_df)[colnames(merged_df) == "TREAT.x"] = "i.treat"
colnames(merged_df)[colnames(merged_df) == "TREAT.y"] = "st1.treat"
}
else {
mg.before <- da99999.0001 %>% drop_na(ID, TREAT, SCHID, SCHTREAT, WRISTOW2) %>% select(ID, paste0('ST', i), TREAT, SCHID, SCHTREAT, WRISTOW2, STRB)
right = mg.before %>% select(ID, TREAT, SCHID)
merged_df = merge(x = merged_df, y = right, by.x = c(paste0("ST", i), "SCHID"), by.y = c("ID", "SCHID"), all.x = TRUE)
colnames(merged_df)[colnames(merged_df) == "TREAT"] = paste0("st",i,"treat")
}
}
merged_df[is.na(merged_df)] = 0
merged_df <- merged_df %>% mutate(indirect = (st1.treat + st2treat + st3treat + st4treat +
st5treat + st6treat + st7treat + st8treat +
st9treat + st10treat) >0)
merged_df$indirect_fake = rep(FALSE, dim(merged_df)[1])
for (i in 1:dim(merged_df)[1]) {
row = merged_df[i,]
if (row$indirect != 1 & row$SCHTREAT == 1) {
temp <- merged_df %>% filter(SCHID == row$SCHID, i.treat == 1) %>% select(ST1, ST2, ST3, ST4, ST5, ST6, ST7, ST8, ST9, ST10, i.treat)
for (j in 1:dim(temp)[1]) {
temp_row = temp[j,]
if (temp_row$i.treat == 1 & (temp_row$ST1 == row$ID|
temp_row$ST2 == row$ID|
temp_row$ST3 == row$ID|
temp_row$ST4 == row$ID|
temp_row$ST5 == row$ID|
temp_row$ST6 == row$ID|
temp_row$ST7 == row$ID|
temp_row$ST8 == row$ID|
temp_row$ST9 == row$ID|
temp_row$ST10 == row$ID)) {
merged_df[i,which(colnames(merged_df) == "indirect_fake")] = TRUE
break
}
}
}
}
return(merged_df)
}
plan(multisession, workers = 16)
registerDoFuture()
R = 160
simulate4 <- foreach(i = 1:R) %dorng% {
students <- generate_treat(da99999.0002)
df <- mis_join2(students)
df$index = 1:length(df$SCHID)
exposure = rep(0, length(df$SCHID))
q = df %>% filter(indirect == TRUE & i.treat == 1) %>% select(index)
q2 = df %>% filter(indirect == FALSE & i.treat == 1 & indirect_fake == FALSE) %>% select(index)
q3 = df %>% filter(indirect == TRUE & i.treat == 0) %>% select(index)
q4 = df %>% filter(SCHTREAT == 1 & indirect == FALSE & i.treat == 0 & indirect_fake == FALSE) %>% select(index)
q5 = df %>% filter(indirect_fake == TRUE & i.treat == 0) %>% select(index)
q6 = df %>% filter(indirect_fake == TRUE & i.treat == 1) %>% select(index)
exposure[q$index] = "Direct+Indirect"
exposure[q2$index] = "Direct"
exposure[q3$index] = "Indirect"
exposure[q4$index] = "School"
exposure[q5$index] = "2ndIndirect"
exposure[q6$index] = "Direct+2ndIndirect"
df$exposure = exposure
WRISTOW2 = rep(0, length(exposure))
WRISTOW2[exposure == "Direct+Indirect"] = rbernoulli(length(q$index), Y_di)
WRISTOW2[exposure == "Direct+2ndIndirect"] = rbernoulli(length(q6$index), Y_di-0.1)
WRISTOW2[exposure == "Direct"] = rbernoulli(length(q2$index), Y_d)
WRISTOW2[exposure == "Indirect"] = rbernoulli(length(q3$index), Y_ind)
WRISTOW2[exposure == "2ndIndirect"] = rbernoulli(length(q5$index), Y_ind - 0.1)
WRISTOW2[exposure == "School"] = rbernoulli(length(q4$index), Y_sch)
sim_df = join(students)
sim_df$index = 1:length(sim_df$SCHID)
q = sim_df %>% filter(indirect == TRUE & i.treat == 1) %>% select(index)
q2 = sim_df %>% filter(indirect == FALSE & i.treat == 1) %>% select(index)
q3 = sim_df %>% filter(indirect == TRUE & i.treat == 0) %>% select(index)
q4 = sim_df %>% filter(SCHTREAT == 1 & indirect == FALSE & i.treat == 0)
exposure = rep(0, length(df$SCHID))
exposure[q$index] = "Direct+Indirect"
exposure[q2$index] = "Direct"
exposure[q3$index] = "Indirect"
exposure[q4$index] = "School"
sim_df$exposure = exposure
sim_df$pd = merged_df$pd
sim_df$psch = merged_df$psch
sim_df$pdi = merged_df$pdi
sim_df$pind = merged_df$pind
sim_df$noschool = rep(1/2, length(sim_df$SCHID))
sim_df$WRISTOW2 = WRISTOW2
output <- simulate_estimate(sim_df)
output
}
sim_mis_3 <- data.frame(Estimand =c("Direct+Indirect", "Direct", "Indirect", "School"),
Mean_HT = c(mean(sapply(simulate4, function(x){x$Estimate[1]})),
mean(sapply(simulate4, function(x){x$Estimate[2]})),
mean(sapply(simulate4, function(x){x$Estimate[3]})),
mean(sapply(simulate4, function(x){x$Estimate[4]}))),
Sd_HT = c(sd(sapply(simulate4, function(x){x$Estimate[1]})),
sd(sapply(simulate4, function(x){x$Estimate[2]})),
sd(sapply(simulate4, function(x){x$Estimate[3]})),
sd(sapply(simulate4, function(x){x$Estimate[4]}))),
Mean_avg = c(mean(sapply(simulate4, function(x){x$Avg_estimate[1]})),
mean(sapply(simulate4, function(x){x$Avg_estimate[2]})),
mean(sapply(simulate4, function(x){x$Avg_estimate[3]})),
mean(sapply(simulate4, function(x){x$Avg_estimate[4]}))),
Sd_avg = c(sd(sapply(simulate4, function(x){x$Avg_estimate[1]})),
sd(sapply(simulate4, function(x){x$Avg_estimate[2]})),
sd(sapply(simulate4, function(x){x$Avg_estimate[3]})),
sd(sapply(simulate4, function(x){x$Avg_estimate[4]}))))
# Results to report
sim_true = sim_true %>% mutate(True = c(Y_di, Y_d, Y_ind, Y_sch)) %>% mutate(Bias_HT = True - Mean_HT, Bias_Avg = True - Mean_avg)
sim_true
sim_mis_1 = sim_mis_1 %>% mutate(True = c(Y_di, Y_d, Y_ind, Y_sch)) %>% mutate(Bias_HT = True - Mean_HT, Bias_Avg = True - Mean_avg)
sim_mis_1
sim_mis_2 = sim_mis_2 %>% mutate(True = c(Y_d, Y_d, Y_sch, Y_sch)) %>% mutate(Bias_HT = True - Mean_HT, Bias_Avg = True - Mean_avg)
sim_mis_2
sim_mis_3
merged_df$pd
ipi_di
ipi_di[1,1]
ipi_di[1,2]
ipi_di[1,4]
ipi_di[5,5]
diag(ipi_d)
d/R
diag(pi_d)
diag(ipi_di)
merged_df %>% group_by(i.treat, indirect, SCHTREAT) %>% summarize(min(pdi), min(pd), min(pind), min(psch), min(noschool)) # All d(k) is greater than zero
merged_df %>% group_by(i.treat, indirect, SCHTREAT) %>% summarize(mean(pdi), mean(pind), mean(psch), mean(noschool))
di = rep(0, length(merged_df$SCHID))
d = rep(0, length(merged_df$SCHID))
ind = rep(0, length(merged_df$SCHID))
sch = rep(0, length(merged_df$SCHID))
for (i in output){
di = di + i$direct_indirect
d = d + i$direct
ind = ind + i$indirect
sch = sch + i$school
}
merged_df$pd = (d+1)/(R+1)
merged_df$psch = (sch+1)/(R+1)
merged_df$pdi = (di+1)/(R+1)
merged_df$pind = (ind+1)/(R+1)
merged_df$noschool = rep(1/2, length(merged_df$SCHID))
merged_df$pd = (d)/(R)
merged_df$psch = (sch)/(R)
merged_df$pdi = (di)/(R)
merged_df$pind = (ind)/(R)
merged_df$noschool = rep(1/2, length(merged_df$SCHID))
merged_df$i.treat[merged_df$SCHTREAT==0] = 0
merged_df$indirect[merged_df$SCHTREAT==0] = 0
merged_df %>% summarize(mean(pdi), mean(pind), mean(psch), mean(noschool))
merged_df %>% group_by(i.treat, indirect, SCHTREAT) %>% summarize(mean(pdi), mean(pind), mean(psch), mean(noschool))
merged_df %>% group_by(i.treat, indirect, SCHTREAT) %>% summarize(min(pdi), min(pd), min(pind), min(psch), min(noschool)) # All d(k) is greater than zero
di = rep(0, length(merged_df$SCHID))
d = rep(0, length(merged_df$SCHID))
ind = rep(0, length(merged_df$SCHID))
sch = rep(0, length(merged_df$SCHID))
for (i in output){
di = di + i$direct_indirect
d = d + i$direct
ind = ind + i$indirect
sch = sch + i$school
}
R
R = 1600
length(output)
merged_df$pd = (d)/(R)
merged_df$psch = (sch)/(R)
merged_df$pdi = (di)/(R)
merged_df$pind = (ind)/(R)
merged_df$noschool = rep(1/2, length(merged_df$SCHID))
merged_df$i.treat[merged_df$SCHTREAT==0] = 0
merged_df$indirect[merged_df$SCHTREAT==0] = 0
merged_df %>% summarize(mean(pdi), mean(pind), mean(psch), mean(noschool))
merged_df %>% group_by(i.treat, indirect, SCHTREAT) %>% summarize(mean(pdi), mean(pind), mean(psch), mean(noschool))
merged_df %>% group_by(i.treat, indirect, SCHTREAT) %>% summarize(min(pdi), min(pd), min(pind), min(psch), min(noschool)) # All d(k) is greater than zero
# Note, there exists someone who received indirect but not direct effect that will never received only school effect.
# This unit is probably linked to all of the guys in the program in that school so that he or she will either receives an indirect effect or no school effect.
merged_df$index = 1:dim(merged_df)[1]
write.csv(merged_df, "merged_df.csv")
setwd("~/GitHub/baobao")
X_train = read.csv("X_train.csv")
y_train = read.csv("y_train.csv")
model = lm(y_train ~ X_train)
model = lm(y_train ~ ., data=X_train)
model = lm(y_train$demand ~ ., data=X_train$)
model = lm(y_train$demand ~ ., data=X_train)
summary(model)
X_train
View(X_train)
?read.csv
X_train = X_train[,2:]
X_train = X_train[,2:dim(X_train)[2]]
model = lm(y_train$demand ~ ., data=X_train)
summary(model)
model$fitted.values
hist(model$fitted.values)
summary(model$fitted.values)
hist(model$residuals)
plot(X_train$reviews_per_month, model$residuals)
plot(X_train$review_scores_rating, model$residuals)
